[{"title":"Hello World","url":"/2022/06/13/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"drone+rancher+docker实现自动化部署踩坑","url":"/2022/06/16/drone-rancher-docker%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%B8%A9%E5%9D%91/","content":"安装docker参考docker和docker-compose安装\n参考地址：https://yq.aliyun.com/articles/110806\t\thttps://docs.docker.com/compose/install/\n\n安装rancher1.x版本\n这个地方就不用docker去pull这样一步步去安装了，直接执行运行命令，docker会检测没有镜像会去拉取\n如果需要确定拉取的rancher版本，则需要手动去一步步拉取镜像\n\nsudo docker run -d -v /var/lib/mysql:/var/lib/mysql --restart=unless-stopped -p 8236:8080 rancher/server\n\n如果没有问题会执行成功，然后访问 ip:8236\n\n先配置 系统管理—&gt;访问控制 根据流程设置管理员用户和其他配置\n\n基础框架–&gt;添加主机根据提示添加主机\n\n基础架构&gt;镜像库添加私有镜像库\n\n安装Gitea使用docker-compose运行\nsudo docker-compose -f gitea-docker-compose.yml  up -d\n\ngitea-docker-compose.yml文件内容：\nversion: &#x27;2&#x27;services:  gitea:    image: gitea/gitea:latest    container_name: gitea    ports:    - &quot;10022:22&quot;    - &quot;10080:3000&quot;    volumes:    - /var/lib/gitea:/data    restart: always\n\n启动后，访问ip:10080进入安装界面进行配置。\n安装drone在Gitea新建OAuth Application,参考官方文档。\n\n注意！ 将生成的客户端ID和客户端密钥保存。\ndocker-compose.yml文件内容:\nversion: &#x27;2&#x27;services:  drone-server:    image: drone/drone:1.2.1    container_name: drone-server    networks:      - dronenet        # 让drone-server和drone-agent处于一个网络中，方便进行RPC通信    ports:      - &#x27;8099:80&#x27;      # Web管理面板的入口 PROTO=http  时使用该端口      - &#x27;8999:443&#x27;     # Web管理面板的入口 PROTO=https 时使用该端口      - &#x27;9000:9000&#x27;    # RPC服务端口    volumes:      - /var/run/docker.sock:/var/run/docker.sock   # docker.sock [1]      - /var/lib/drone/:/var/lib/drone             # drone数据存放路径    environment:      - DRONE_AGENTS_ENABLED=false                   # 使用Runner      #- DRONE_GITLAB_SERVER=$&#123;DRONE_GITLAB_SERVER&#125;      #- DRONE_GITLAB_CLIENT_ID=$&#123;DRONE_GITLAB_CLIENT_ID&#125;      #- DRONE_GITLAB_CLIENT_SECRET=$&#123;DRONE_GITLAB_CLIENT_SECRET&#125;      #- DRONE_GITHUB_SERVER=$&#123;DRONE_GITHUB_SERVER&#125;     # - DRONE_GITHUB_CLIENT_ID=$&#123;DRONE_GITHUB_CLIENT_ID&#125;     # - DRONE_GITHUB_CLIENT_SECRET=$&#123;DRONE_GITHUB_CLIENT_SECRET&#125;      - DRONE_GITEA_SERVER=$&#123;DRONE_GITEA_SERVER&#125;                   # github的地址      - DRONE_GITEA_CLIENT_ID=$&#123;DRONE_GITEA_CLIENT_ID&#125;          # gitea获得的ClientID      - DRONE_GITEA_CLIENT_SECRET=$&#123;DRONE_GITEA_CLIENT_SECRET&#125;  # gitea获得的ClientSecret      - DRONE_RPC_SECRET=$&#123;DRONE_RPC_SECRET&#125;                      # RPC秘钥     [2]      - DRONE_SERVER_HOST=$&#123;DRONE_SERVER_HOST&#125;                    # RPC域名(在一个实例上可以不用)      - DRONE_SERVER_PROTO=$&#123;DRONE_SERVER_PROTO&#125;                  # git webhook使用的协议(我建议http)      - DRONE_OPEN=true                                           # 开发drone      - DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite     # 数据库文件      - DRONE_DATABASE_DRIVER=sqlite3                             # 数据库驱动，我这里选的sqlite      #- DRONE_DATABASE_DRIVER=mysql      - DRONE_DEBUG=true                                          # 调试相关，部署的时候建议先打开      - DRONE_LOGS_DEBUG=true                                     # 调试相关，部署的时候建议先打开      - DRONE_LOGS_TRACE=true                                     # 调试相关，部署的时候建议先打开      - DRONE_USER_CREATE=username:***,admin:true           # 初始管理员用户 gitea用户名      - TZ=Asia/Shanghai                                          # 时区    restart: always  drone-agent:    image: drone/agent:1.2.1    container_name: drone-agent    networks:      - dronenet     # 让drone-server和drone-agent处于一个网络中，方便进行RPC通信    depends_on:      - drone-server    volumes:      - /var/run/docker.sock:/var/run/docker.sock # docker.sock [1]    environment:      - DRONE_RPC_SERVER=http://drone-server  # RPC服务地址      - DRONE_RPC_SECRET=$&#123;DRONE_RPC_SECRET&#125;  # RPC秘钥        - DRONE_RPC_PROTO=$&#123;DRONE_RPC_PROTO&#125;    # RPC协议(http || https)      - DRONE_RUNNER_CAPACITY=2               # 最大并发执行的 pipeline 数      - DRONE_DEBUG=true                      # 调试相关，部署的时候建议先打开      - DRONE_LOGS_TRACE=true                 # 调试相关，部署的时候建议先打开      - TZ=Asia/Shanghai    restart: alwaysnetworks:  dronenet:                                     # 让drone-server和drone-agent处于一个网络中，方便进行RPC通信\n\n上述drone.yml中有配置从gitea获取的id和keys需要配置\n\n1、 因为插件本身也是一个容器，要在容器中(docker-server、drone-runnere)中运行容器。将docker.sock挂载到容器中，可以让容器通过docker unix socket API得到管理容器的能力。\n2、 openssl rand -hex 16 这个命令随机生成秘钥\n\n3、新建.env文件并编辑如下\n#DRONE_GITHUB_CLIENT_ID=****#DRONE_GITHUB_CLIENT_SECRET=****DRONE_GITEA_SERVER=http://git****comDRONE_GITEA_CLIENT_ID=****DRONE_GITEA_CLIENT_SECRET=****#DRONE_GITLAB_SERVER=http://git.****.com#DRONE_GITLAB_CLIENT_ID=****#DRONE_GITLAB_CLIENT_SECRET=****DRONE_RPC_SECRET=*****DRONE_SERVER_HOST=drone.****.comDRONE_SERVER_PROTO=httpsDRONE_RPC_SERVER=****:9000DRONE_RPC_PROTO=http\n\n将drone的docker-compose.yml和.env放在同一目录，然后运行以下命令：\nsudo docker-compose up -d\n\n文档参考地址：\nhttps://juejin.im/post/5d97489ee51d457824771d47https://docs.drone.io/server/provider/gitea/\n\n总结总体来说需要配置安装并让几个组件协同运作，之前配置rancher后管理的容器有存在获取不到的情况，暂时没找到如何解决的办法，查找官方手册后发现有可能是版本的问题，但没有尝试修改版本。drone的文档看起来比较费劲，有些文档写的地方不好找，有关于drone插件的文档如下：\nhttps://docs.drone.io/plugins/popular/docker/\n\n自动部署涉及到编写DockerFile，下面出个例子\n\n*** 为需要自己配置的内容\n\nFROM ***ENV SPRING_OUTPUT_ANSI_ENABLED=ALWAYS \\    JHIPSTER_SLEEP=0 \\    JAVA_OPTS=&quot;&quot;#设置中科大镜像，并且设置北京时间RUN \\  echo -e &quot;https://mirrors.tuna.tsinghua.edu.cn/alpine/v3.14/main\\nhttps://mirrors.tuna.tsinghua.edu.cn/alpine/v3.14/community\\nhttps://mirrors.tuna.tsinghua.edu.cn/alpine/v3.14/releases&quot; &gt; /etc/apk/repositories &amp;&amp; \\  apk add --no-cache tzdata ttf-dejavu fontconfig tini &amp;&amp; \\  cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \\  echo &quot;Asia/Shanghai&quot; &gt;  /etc/timezone &amp;&amp; \\  rm -rf /var/cache/apk/*# Add a jhipster user to run our application so that it doesn&#x27;t need to run as rootRUN adduser -D -s /bin/sh ***WORKDIR /home/***ADD /src/main/resources/kdwebapi.properties kdwebapi.propertiesADD /src/main/docker/entrypoint.sh entrypoint.shRUN chmod 755 entrypoint.sh &amp;&amp; chown ***:*** entrypoint.shCOPY /src/main/resources/ttc/msyh.ttc /usr/share/fonts/ttf-dejavu/msyh.ttcRUN chown root:root /usr/share/fonts/ttf-dejavu/msyh.ttcUSER ***ENTRYPOINT [&quot;/sbin/tini&quot;,&quot;--&quot;,&quot;./entrypoint.sh&quot;]EXPOSE 8083ADD /target/*.jar app.jarADD /src/main/resources/sdk/arthas-boot.jar arthas-boot.jar\n\n\n附件：DockerFile指令表\n\n\n最后​    内容还有待补充\n","tags":["CI/CD"]}]